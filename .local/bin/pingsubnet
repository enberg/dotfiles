#!/bin/bash

# Ping for reachable hosts in subnet

usage() {
    cat << EOF
Usage: $(basename $0) SUBNET [START] [END]

Pings all hosts on SUBNET and returns a list of the ones that respond.
Optionally limited to ping hosts from START up to END.

Arguments:
    SUBNET - A subnet specified by the three most significant bytes (i.e 192.168.0)
    START  - The least significant byte of the ip to start at (i.e. 1)
    END    - The least significant byte of the ip to end at (i.e. 254)
EOF
}

# See if we can run parallel
type "parallel" &> /dev/null
PARALLEL_CHECK=$?

RANGE_START=1
RANGE_END=254

# Check args
if [ $# -lt 1 ]; then
    echo "Error: Bad parameters"
    usage
    exit 1
fi
if [[ ! $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    echo "Error: Bad parameters, only accepts ip subrange in format #{##}.#{##}.#{##}"
    usage
    exit 1
fi
RANGE_BASE=$1
if [ ! -z $2 ]; then
    if [[ ! $2 =~ ^[0-9]{1,3}$ ]]; then
        echo "Error: Bad parameters, only accepts ip range start in format #{##}"
        usage
        exit 1
    fi
    RANGE_START=$2
fi
if [ ! -z $3 ]; then
    if [[ ! $3 =~ ^[0-9]{1,3}$ ]]; then
        echo "Error: Bad parameters, only accepts ip range end in format #{##}"
        usage
        exit 1
    fi
    RANGE_END=$3
fi

if [[ $PARALLEL_CHECK == 0 ]]; then
    # Parallel super fast hold on to your hats method
    seq $RANGE_START $RANGE_END \
        | parallel -j0 --gnu -k ping -c1 $RANGE_BASE.{} \
        | grep '64 bytes' \
        | cut -d' ' -f4 \
        | sed 's/://'
else
    # Iterative slower and slightly opportunistic method
    for i in $(seq $RANGE_START $RANGE_END)
    do
        ping -c1 $RANGE_BASE.$i \
            | grep '64 bytes' \
            | cut -d' ' -f4 \
            | sed 's/://' &

        # Run in batches of 20
        if [ $(( $i % 20 )) -eq 0 ]; then
            wait
        fi
    done
    wait
fi
